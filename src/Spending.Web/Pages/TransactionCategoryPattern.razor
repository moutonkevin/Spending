@page "/transactioncategorypattern"
@using System.Text
@using Newtonsoft.Json
@using Spending.Database.Entities
@inject HttpClient Http

<h1>Categorize</h1>

<UserDropDownComponent SetUserId="@SetUserId"/>

@if (_transactionsCategoryPatterns != null)
{
    <div>@_number</div>
    <div>
        <table style="width:100%">
            <tr>
                <th>Category</th>
                <th>Pattern</th>
            </tr>
            @foreach (var transactionsCategoryPattern in _transactionsCategoryPatterns)
            {
                <tr>
                    <td>
                        <CategoryDropDownComponent CategoryId="@transactionsCategoryPattern.CategoryId" SetCategoryId="@SetCategoryId"/>
                    </td>
                    <td>
                        <input type="text" id="@("input"+rand.Next())" @bind="@transactionsCategoryPattern.Pattern">
                    </td>
                    <td>
                        <button type="button" id="@("button"+rand.Next())" @onclick="@(e => SaveTransactionCategoryPattern(@transactionsCategoryPattern))">Save</button>
                    </td>
                </tr>
            }
        </table>
    </div>
}

@code {

    readonly List<User> _users = new List<User>()
    {
        new User { Id = 1, Name = "Kevin" }
    };

    readonly List<Category> _categories = new List<Category>()
    {
        new Category { Id = 1, Name = "Rent" },
        new Category { Id = 2, Name = "Groceries" },
        new Category { Id = 3, Name = "Health Insurance" },
        new Category { Id = 4, Name = "Mobile Phone" },
        new Category { Id = 5, Name = "Electricity" },
        new Category { Id = 6, Name = "Gas" },
        new Category { Id = 7, Name = "Entertainment" },
        new Category { Id = 8, Name = "Internet" },
        new Category { Id = 9, Name = "Shopping" },
        new Category { Id = 10, Name = "Holiday" },
        new Category { Id = 11, Name = "Gym" },
        new Category { Id = 12, Name = "Transfer Between Accounts" },
        new Category { Id = 13, Name = "Salary" }
    };

    int _number;
    int _userIdSelected;
    int _categorySelected;
    string _descriptionContent;
    IList<Spending.Api.Models.TransactionCategoryPattern> _transactionsCategoryPatterns = null;
    Random rand = new Random();
    string apiRootUrl = "https://localhost:5003/api";

    protected override async Task OnInitializedAsync()
    {
        _userIdSelected = _users.FirstOrDefault().Id;
        _transactionsCategoryPatterns = await GetTransactionCategoryPattern();
        _number = _transactionsCategoryPatterns.Count;
    }

    async Task<IList<Spending.Api.Models.TransactionCategoryPattern>> GetTransactionCategoryPattern()
    {
        var response = await Http.GetAsync($"{apiRootUrl}/TransactionCategoryPattern?userId={_userIdSelected}");
        var responseContent = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<IList<Spending.Api.Models.TransactionCategoryPattern>>(responseContent).ToList();
    }

    async Task SaveTransactionCategoryPattern(Spending.Api.Models.TransactionCategoryPattern transactionCategoryPattern)
    {
        var content = new StringContent(JsonConvert.SerializeObject(transactionCategoryPattern), Encoding.UTF8, "application/json");
        var response = await Http.PostAsync(
            $"{apiRootUrl}/transactioncategorypattern?categoryId={_categorySelected}&userId={_userIdSelected}&descriptionContent={_descriptionContent}",
            content);

        var res = await response.Content.ReadAsStringAsync();
        var isSuccess = JsonConvert.DeserializeAnonymousType(res, new {IsSuccess = true});
    }

    private void SetCategoryId(int categoryId)
    {
        _categorySelected = categoryId;
    }

    private void SetUserId(int userId)
    {
        _userIdSelected = userId;
    }
}
