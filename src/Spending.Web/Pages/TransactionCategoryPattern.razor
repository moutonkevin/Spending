@page "/transactioncategorypattern"
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using Spending.Web.Data
@inject HttpClient Http
@inject IOptions<Configuration> ConfigOptions
@using Spending.Web.Pages.Components
@using Spending.Database

<h1>User Patterns</h1>

<GenericDropDownComponent Source="@Constants.Users.List.Select(s => new GenericDropDown {Id = s.Id, DisplayName = s.Name}).ToList()" SetSelectedId="@SetUserId" />

@if (_transactionsCategoryPatterns != null)
{
    <div>Number of records: @_recordsNumber</div>
    <div>
        <table style="width:100%">
            <tr>
                <th>Category</th>
                <th>Pattern</th>
                <th></th>
            </tr>
            @foreach (var transactionsCategoryPattern in _transactionsCategoryPatterns)
            {
                <tr>
                    <td>
                        <CategoryDropDownComponent CategoryId="@transactionsCategoryPattern.CategoryId" ExternalId="@transactionsCategoryPattern.Id" SetCategoryId="@SetCategoryId" />
                    </td>
                    <td>
                        <input type="text" @bind="@transactionsCategoryPattern.Pattern">
                    </td>
                    <td>
                        <button type="button" @onclick="@(e => UpdateTransactionCategoryPattern(transactionsCategoryPattern))">Update</button>
                        <button type="button" @onclick="@(e => DeleteTransactionCategoryPattern(transactionsCategoryPattern))">Delete</button>
                    </td>
                </tr>
            }
        </table>
    </div>
}

@code {

    int _recordsNumber;
    int _userIdSelected;
    IList<Spending.Api.Models.TransactionCategoryPattern> _transactionsCategoryPatterns = null;

    protected override async Task OnInitializedAsync()
    {
        await SetUserId(1);
    }

    async Task<IList<Spending.Api.Models.TransactionCategoryPattern>> GetTransactionCategoryPattern()
    {
        return await Http.GetJsonAsync<IList<Spending.Api.Models.TransactionCategoryPattern>>(
            $"{ConfigOptions.Value.ApiBaseUrl}/TransactionCategoryPattern?userId={_userIdSelected}");
    }

    async Task UpdateTransactionCategoryPattern(Spending.Api.Models.TransactionCategoryPattern transactionCategoryPattern)
    {
        var isSuccess = await Http.PutJsonAsync<bool>($"{ConfigOptions.Value.ApiBaseUrl}/api/TransactionCategoryPattern?userId={_userIdSelected}",
            transactionCategoryPattern);
    }

    async Task DeleteTransactionCategoryPattern(Spending.Api.Models.TransactionCategoryPattern transactionCategoryPattern)
    {
        var response = await Http.DeleteAsync($"{ConfigOptions.Value.ApiBaseUrl}/api/TransactionCategoryPattern?transactionCategoryPatternId={transactionCategoryPattern.Id}");
        var isSuccess = JsonConvert.DeserializeObject<bool>(await response.Content.ReadAsStringAsync());

        if (isSuccess)
        {
            _transactionsCategoryPatterns.Remove(transactionCategoryPattern);
        }
    }

    private void SetCategoryId(Tuple<int, int> category)
    {
        var categoryId = category.Item1;
        var transactionsCategoryPatternId = category.Item2;

        var transactionsCategoryPattern = _transactionsCategoryPatterns.FirstOrDefault(f => f.Id == transactionsCategoryPatternId);
        if (transactionsCategoryPattern != null)
        {
            transactionsCategoryPattern.CategoryId = categoryId;
        }
    }

    private async Task SetUserId(int userId)
    {
        _userIdSelected = userId;
        _transactionsCategoryPatterns = await GetTransactionCategoryPattern();
        _recordsNumber = _transactionsCategoryPatterns.Count;
    }
}
