@page "/transactioncategorypattern"
@using System.Text
@using Newtonsoft.Json
@inject HttpClient Http

<h1>User Patterns</h1>

<UserDropDownComponent SetUserId="@SetUserId"/>

@if (_transactionsCategoryPatterns != null)
{
    <div>Number of records: @_recordsNumber</div>
    <div>
        <table style="width:100%">
            <tr>
                <th>Category</th>
                <th>Pattern</th>
                <th></th>
            </tr>
            @foreach (var transactionsCategoryPattern in _transactionsCategoryPatterns)
            {
        <tr>
            <td>
                <CategoryDropDownComponent CategoryId="@transactionsCategoryPattern.CategoryId" TransactionCategoryPatternId="@transactionsCategoryPattern.Id" SetCategoryId="@SetCategoryId" />
            </td>
            <td>
                <input type="text" @bind="@transactionsCategoryPattern.Pattern">
            </td>
            <td>
                <button type="button" @onclick="@(e => UpdateTransactionCategoryPattern(transactionsCategoryPattern))">Update</button>
                <button type="button" @onclick="@(e => DeleteTransactionCategoryPattern(transactionsCategoryPattern))">Delete</button>
            </td>
            </tr>
            }
        </table>
    </div>
}

@code {

    int _recordsNumber;
    int _userIdSelected;
    IList<Spending.Api.Models.TransactionCategoryPattern> _transactionsCategoryPatterns = null;

    protected override async Task OnInitializedAsync()
    {
        await SetUserId(1);
    }

    async Task<IList<Spending.Api.Models.TransactionCategoryPattern>> GetTransactionCategoryPattern()
    {
        return await Http.GetJsonAsync<IList<Spending.Api.Models.TransactionCategoryPattern>>(
            $"https://localhost:5003/api/TransactionCategoryPattern?userId={_userIdSelected}");
    }

    async Task UpdateTransactionCategoryPattern(Spending.Api.Models.TransactionCategoryPattern transactionCategoryPattern)
    {
        var isSuccess = await Http.PutJsonAsync<bool>($"https://localhost:5003/api/TransactionCategoryPattern?userId={_userIdSelected}",
            transactionCategoryPattern);
    }

    async Task DeleteTransactionCategoryPattern(Spending.Api.Models.TransactionCategoryPattern transactionCategoryPattern)
    {
        var response = await Http.DeleteAsync($"https://localhost:5003/api/TransactionCategoryPattern?transactionCategoryPatternId={transactionCategoryPattern.Id}");
        var isSuccess = JsonConvert.DeserializeObject<bool>(await response.Content.ReadAsStringAsync());

        if (isSuccess)
        {
            _transactionsCategoryPatterns.Remove(transactionCategoryPattern);
        }
    }

    private void SetCategoryId(Tuple<int, int> category)
    {
        var categoryId = category.Item1;
        var transactionsCategoryPatternId = category.Item2;

        var transactionsCategoryPattern = _transactionsCategoryPatterns.FirstOrDefault(f => f.Id == transactionsCategoryPatternId);
        if (transactionsCategoryPattern != null)
        {
            transactionsCategoryPattern.CategoryId = categoryId;
        }
    }

    private async Task SetUserId(int userId)
    {
        _userIdSelected = userId;
        _transactionsCategoryPatterns = await GetTransactionCategoryPattern();
        _recordsNumber = _transactionsCategoryPatterns.Count;
    }
}
