@using System.Text
@using Newtonsoft.Json
@using Spending.Database.Entities
@inject HttpClient Http

<tr>
    <td>@Transaction.Date</td>
    <td>@Transaction.Amount</td>
    <td>@Transaction.TransactionTypeId</td>
    <td>@Transaction.Description</td>
    <td>@Transaction.UserId</td>
    <td>
        <select id="@("select"+rand.Next())" @bind="_categorySelected">
            @foreach (var category in _categories)
            {
                <option value=@category.Id>@category.Name</option>
            }
        </select>
        <input type="text" id="@("input"+rand.Next())" @bind="@_descriptionContent">
        <button type="button" id="@("button"+rand.Next())" @onclick="@(e => SaveTransactionCategory(@Transaction))">Save</button>
    </td>
</tr>

@code {

    [Parameter]
    public Transaction Transaction { get; set; }

    [Parameter]
    public int UserId { get; set; }

    [Parameter] public EventCallback<Transaction> RemoveTransaction { get; set; }

    Random rand = new Random();
    int _categorySelected;
    string _descriptionContent;
    string apiRootUrl = "https://localhost:5003/api";

    readonly List<Category> _categories = new List<Category>()
{
        new Category { Id = 1, Name = "Rent" },
        new Category { Id = 2, Name = "Groceries" },
        new Category { Id = 3, Name = "Health Insurance" },
        new Category { Id = 4, Name = "Mobile Phone" },
        new Category { Id = 5, Name = "Electricity" },
        new Category { Id = 6, Name = "Gas" },
        new Category { Id = 7, Name = "Entertainment" },
        new Category { Id = 8, Name = "Internet" },
        new Category { Id = 9, Name = "Shopping" },
        new Category { Id = 10, Name = "Holiday" },
        new Category { Id = 11, Name = "Gym" },
        new Category { Id = 12, Name = "Transfer Between Accounts" },
        new Category { Id = 13, Name = "Salary" }
    };

    async Task SaveTransactionCategory(Transaction Transaction)
    {
        var content = new StringContent(JsonConvert.SerializeObject(Transaction), Encoding.UTF8, "application/json");
        var response = await Http.PostAsync(
            $"{apiRootUrl}/transactioncategory?categoryId={_categorySelected}&userId={UserId}&descriptionContent={_descriptionContent}",
            content);

        var res = await response.Content.ReadAsStringAsync();
        var isSuccess = JsonConvert.DeserializeAnonymousType(res, new {IsSuccess = true});

        if (isSuccess.IsSuccess)
        {
            await RemoveTransaction.InvokeAsync(Transaction);
        }
    }
}
