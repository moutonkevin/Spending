@page "/categorize"
@using Microsoft.Extensions.Options
@using Spending.Api.Models
@using Spending.Database
@using Spending.Web.Data
@inject HttpClient Http
@inject IOptions<Configuration> ConfigOptions
@using Spending.Web.Pages.Components

<h1>Categorize</h1>

<GenericDropDownComponent Source="@Constants.Users.List.Select(s => new GenericDropDown {Id = s.Id, DisplayName = s.Name}).ToList()" SetSelectedId="@SetUserId" />

@if (_transactions != null)
{
    <div>@_number</div>
    <div>
        <table style="width:100%">
            <tr>
                <th>Date</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Description</th>
                <th>Category</th>
            </tr>
            @foreach (var transaction in _transactions)
            {
                <tr>
                    <td>@transaction.Date</td>
                    <td>@transaction.Amount</td>
                    <td>@(Constants.TransactionTypes.List.FirstOrDefault(f => f.Id == transaction.TransactionTypeId).Name)</td>
                    <td>@transaction.Description</td>
                    <td>
                        <CategoryDropDownComponent CategoryId="9" ExternalId="@transaction.Id" SetCategoryId="@SetCategoryId" />
                        <input type="text" @bind="@transaction.Description">
                        <button type="button" @onclick="@(e => SaveTransactionCategory(transaction))">Save</button>
                    </td>
                </tr>
            }
        </table>
    </div>
}

@code {

    int _number;
    int _userIdSelected;
    IList<Transaction> _transactions = null;

    async Task<IList<Transaction>> GetUncategorizedTransactions()
    {
        return await Http.GetJsonAsync<IList<Transaction>>($"{ConfigOptions.Value.ApiBaseUrl}/transaction/GetUncategorizedTransactions?userId={_userIdSelected}");
    }

    async Task SaveTransactionCategory(Transaction transaction)
    {
        var isSuccess = await Http.PostJsonAsync<bool>($"{ConfigOptions.Value.ApiBaseUrl}/TransactionCategoryPattern?userId={_userIdSelected}",
            new Api.Models.TransactionCategoryPattern
            {
                CategoryId = transaction.CategoryId,
                Pattern = transaction.Description
            });

        if (isSuccess)
        {
            await LoadTransactionsAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await SetUserId(1);
    }

    async Task SetUserId(int userId)
    {
        _userIdSelected = userId;
        await LoadTransactionsAsync();
    }

    async Task LoadTransactionsAsync()
    {
        _transactions = await GetUncategorizedTransactions();
        _number = _transactions.Count;
    }

    private void SetCategoryId(Tuple<int, int> category)
    {
        var categoryId = category.Item1;
        var transactionId = category.Item2;

        var transaction = _transactions.FirstOrDefault(f => f.Id == transactionId);
        if (transaction != null)
        {
            transaction.CategoryId = categoryId;
        }
    }
}
