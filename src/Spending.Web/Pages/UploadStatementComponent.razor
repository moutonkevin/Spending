@using System.IO
@using System.Net.Http.Headers
@using Newtonsoft.Json
@using Spending.Api.Models
@using Spending.Database.Entities
@inject HttpClient Http

<div>
    <select @bind="_bankIdSelected">
        @foreach (var bank in _banks)
        {
            <option value=@bank.Id>@bank.Name</option>
        }
    </select>
    <select @bind="_accountIdSelected">
        @foreach (var account in _accounts)
        {
            <option value=@account.Id>@account.Name</option>
        }
    </select>
    <select @bind="_userIdSelected">
        @foreach (var user in _users)
        {
            <option value=@user.Id>@user.Name</option>
        }
    </select>
    <select @bind="_fileTypeIdSelected">
        <option value="csv">csv</option>
        <option value="pdf">pdf</option>
    </select>
    <InputFile multiple OnChange="HandleFileSelected" />
</div>

@code {

    [Parameter] public EventCallback<IList<Transaction>> SetTransactions { get; set; }
    [Parameter] public EventCallback<int> SetUserId { get; set; }

    int _bankIdSelected;
    int _accountIdSelected;
    int _userIdSelected;
    string _fileTypeIdSelected;
    string apiRootUrl = "https://localhost:5003/api";

    readonly List<Bank> _banks = new List<Bank>()
    {
        new Bank { Id = 1, Name = "Commonwealth Bank" },
        new Bank { Id = 2, Name = "American Express" },
        new Bank { Id = 3, Name = "CityBank" },
        new Bank { Id = 4, Name = "Westpac" },
        new Bank { Id = 5, Name = "Qantas" }
    };

    readonly List<Account> _accounts = new List<Account>()
    {
        new Account { Id = 1, Name = "Smart Access", BankId = 1}
    };


    readonly List<User> _users = new List<User>()
    {
        new User { Id = 1, Name = "Kevin" }
    };

    HttpContent FormatFileContent(byte[] stream, string contentType, string contentDispositionName, string fileName)
    {
        var file = new ByteArrayContent(stream);
        file.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
        {
            Name = $"\"{contentDispositionName}\"",
            FileName = fileName
        };
        file.Headers.ContentType = new MediaTypeHeaderValue(contentType);

        return file;
    }

    HttpContent FormatDataContent(string content, string contentType, string contentDispositionName)
    {
        var file = new StringContent(content);
        file.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
        {
            Name = $"\"{contentDispositionName}\""
        };
        file.Headers.ContentType = new MediaTypeHeaderValue(contentType);

        return file;
    }

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        try
        {
            var content = new MultipartFormDataContent
    {
                FormatDataContent(JsonConvert.SerializeObject(new StatementMetadata
                {
                    BankId = _bankIdSelected,
                    AccountId = _accountIdSelected,
                    UserId = _userIdSelected,
                    StatementFileType = _fileTypeIdSelected
                }), "application/json", "statementMetadata")
            };

            foreach (var file in files)
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);

                content.Add(FormatFileContent(ms.GetBuffer(), "text/csv", "statementFile", file.Name));
            }
            var response = await Http.PostAsync($"{apiRootUrl}/statement", content);
            var responseContent = await response.Content.ReadAsStringAsync();
            var transactions = JsonConvert.DeserializeObject<IList<Transaction>>(responseContent).OrderBy(t => t.Description).ToList();

            await SetTransactions.InvokeAsync(transactions);
            await SetUserId.InvokeAsync(_userIdSelected);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _bankIdSelected = _banks.FirstOrDefault().Id;
        _accountIdSelected = _accounts.FirstOrDefault().Id;
        _userIdSelected = _users.FirstOrDefault().Id;
        _fileTypeIdSelected = "csv";
    }
}
