@page "/"
@using System.IO
@using System.Net.Http.Headers
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using Spending.Api.Models
@using Spending.Database
@using Spending.Web.Data
@inject HttpClient Http
@using  Spending.Web.Pages.Components
@inject IOptions<Configuration> ConfigsOptions

<div>
    <GenericDropDownComponent Source="@Constants.Banks.List.Select(s => new GenericDropDown {Id = s.Id, DisplayName = s.Name}).ToList()" SetSelectedId="@SetBankId" />
    <GenericDropDownComponent Source="@Constants.Accounts.List.Select(s => new GenericDropDown {Id = s.Id, DisplayName = s.Name}).ToList()" SetSelectedId="@SetAccountId" />
    <GenericDropDownComponent Source="@Constants.Users.List.Select(s => new GenericDropDown {Id = s.Id, DisplayName = s.Name}).ToList()" SetSelectedId="@SetUserId" />
    <GenericDropDownComponent Source="@(new List<GenericDropDown> {new GenericDropDown {Id = Api.Constants.CsvFile.Id, DisplayName = Api.Constants.CsvFile.Type}, new GenericDropDown {Id = Api.Constants.PdFile.Id, DisplayName = Api.Constants.PdFile.Type}})" SetSelectedId="@SetFileTypeId" />

    <InputFile multiple OnChange="HandleFileSelected" />
</div>

@code {

    private void SetBankId(int id)
    {
        _bankIdSelected = id;
    }

    private void SetAccountId(int id)
    {
        _accountIdSelected = id;
    }

    private void SetUserId(int id)
    {
        _userIdSelected = id;
    }

    private void SetFileTypeId(int id)
    {
        _fileTypeIdSelected = id;
    }

    int _bankIdSelected;
    int _accountIdSelected;
    int _userIdSelected;
    int _fileTypeIdSelected;

    HttpContent FormatFileContent(byte[] stream, string contentType, string contentDispositionName, string fileName)
    {
        var file = new ByteArrayContent(stream);
        file.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
        {
            Name = $"\"{contentDispositionName}\"",
            FileName = fileName
        };
        file.Headers.ContentType = new MediaTypeHeaderValue(contentType);

        return file;
    }

    HttpContent FormatDataContent(string content, string contentType, string contentDispositionName)
    {
        var file = new StringContent(content);
        file.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
        {
            Name = $"\"{contentDispositionName}\""
        };
        file.Headers.ContentType = new MediaTypeHeaderValue(contentType);

        return file;
    }

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        try
        {
            var content = new MultipartFormDataContent
            {
                FormatDataContent(JsonConvert.SerializeObject(new StatementMetadata
                {
                    BankId = _bankIdSelected,
                    AccountId = _accountIdSelected,
                    UserId = _userIdSelected,
                    StatementFileTypeId = _fileTypeIdSelected
                }), "application/json", "statementMetadata")
            };

            foreach (var file in files)
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);

                var mediaType = Api.Constants.FileTypes.FirstOrDefault(f => f.Id == _fileTypeIdSelected).MediaType;

                content.Add(FormatFileContent(ms.GetBuffer(), mediaType, "statementFile", file.Name));
            }
            var transactions = await Http.PostAsync($"{ConfigsOptions.Value.ApiBaseUrl}/statement", content);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _bankIdSelected = Constants.Banks.List.FirstOrDefault().Id;
        _accountIdSelected = Constants.Accounts.List.FirstOrDefault().Id;
        _userIdSelected = Constants.Users.List.FirstOrDefault().Id;
        _fileTypeIdSelected = Api.Constants.CsvFile.Id;
    }
}
