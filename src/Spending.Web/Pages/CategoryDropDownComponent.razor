@using Spending.Database.Entities

<select @onchange="OnChanged">
    @foreach (var category in _categories)
    {
        <option selected="@IsSelected(category)" value=@category.Id>@category.Name</option>
    }
</select>

@code {

    [Parameter] public int CategoryId { get; set; }
    [Parameter] public int TransactionCategoryPatternId { get; set; }
    [Parameter] public EventCallback<Tuple<int,int>> SetCategoryId { get; set; }

    readonly List<Category> _categories = new List<Category>
    {
        new Category { Id = 1, Name = "Rent" },
        new Category { Id = 2, Name = "Groceries" },
        new Category { Id = 3, Name = "Health Insurance" },
        new Category { Id = 4, Name = "Mobile Phone" },
        new Category { Id = 5, Name = "Electricity" },
        new Category { Id = 6, Name = "Gas" },
        new Category { Id = 7, Name = "Entertainment" },
        new Category { Id = 8, Name = "Internet" },
        new Category { Id = 9, Name = "Shopping" },
        new Category { Id = 10, Name = "Holiday" },
        new Category { Id = 11, Name = "Gym" },
        new Category { Id = 12, Name = "Transfer Between Accounts" },
        new Category { Id = 13, Name = "Salary" }
    };

    public async Task OnChanged(ChangeEventArgs e) => await SetCategoryId.InvokeAsync(new Tuple<int, int>(int.Parse((string) e.Value), TransactionCategoryPatternId));

    public bool IsSelected(Category category) => category.Id == CategoryId;
}
